package br.com.ecoffee.filters;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import br.com.ecoffee.model.cliente.Cliente;
import br.com.ecoffee.model.usuario.Usuario;
import br.com.ecoffee.service.cliente.ClienteService;
import br.com.ecoffee.service.usuario.UsuarioService;
import br.com.ecoffee.util.security.TokenService;

public class AutenticacaoTokenFilter extends OncePerRequestFilter{

	private TokenService tokenService;
	private ClienteService clienteService;
	private UsuarioService usuarioService;
	
	public AutenticacaoTokenFilter(TokenService tokenService, ClienteService clienteService,
			UsuarioService usuarioService) {
		this.tokenService = tokenService;
		this.clienteService = clienteService;
		this.usuarioService = usuarioService;
	}

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	        throws ServletException, IOException {

	    String token = recuperarToken(request);
	    if (tokenService.isTokenValido(token)) {
	        autenticarUsuario(token);
	        autenticarCliente(token);
	    }

	    filterChain.doFilter(request, response);
	}

	private void autenticarCliente(String token) {
		String username = tokenService.getUsername(token);
		
		Cliente usuario = clienteService.buscarClientePeloEmail(username).get();
		
		UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(usuario, null, usuario.getAuthorities());
		
		SecurityContextHolder.getContext().setAuthentication(authentication);
	}
	
	private void autenticarUsuario(String token) {
		String username = tokenService.getUsername(token);
		
		Usuario usuario = usuarioService.buscarPorNomeUsuario(username).get();
		
		UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(usuario, null, usuario.getAuthorities());
		
		SecurityContextHolder.getContext().setAuthentication(authentication);
	}
	
	

	private String recuperarToken(HttpServletRequest request) {
		String token = request.getHeader("Authorization");
		
		if(token == null || token.isEmpty() || !token.startsWith("Bearer")) {
			return null;
		}
		
		return token.substring(7, token.length());
	}

}
